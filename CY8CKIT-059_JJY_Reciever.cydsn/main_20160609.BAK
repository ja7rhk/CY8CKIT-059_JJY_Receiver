/* ========================================
 *
 * Copyright YOUR COMPANY, THE YEAR
 * All Rights Reserved
 * UNPUBLISHED, LICENSED SOFTWARE.
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION
 * WHICH IS THE PROPERTY OF your company.
 *
 * ========================================
*/

/*******************************************************************************
* Function Name: main
********************************************************************************
*
* Summary:
*  main() performs following functions:
*  1: 
*  2: 
*  3:
*
* Parameters:
*  None.
*
* Return:
*  None.
*
*******************************************************************************/

/* PSoC5 */
#include <device.h>
#include "stdio.h"
/* FreeRTOS */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
/* API */
#include "I2C_CLCD.h"

/* Project Defines */
#define FALSE  0
#define TRUE   1

/***************************************************************************
*	Resources for FreeRTOS
****************************************************************************/

#define TASK_STACK_TONE   128
#define TASK_STACK_JJY   1024

xQueueHandle xQueue_TONE;    /* Queue Data from Task_JJY */

#define TASK_PRIORITY_TONE (tskIDLE_PRIORITY + 3)
#define TASK_PRIORITY_JJY (tskIDLE_PRIORITY + 1)

void Task_TONE (void *pvParameters);
void Task_JJY (void *pvParameters);

xSemaphoreHandle xMutex_CLCD;       /* Mutex for CLCD Port */

/***************************************************************************
*	JJY Parameters
****************************************************************************/

enum rec_state {
   IDLE,
   PULSE_WIDHT_DET,
   PULSE_WAIT,
   JJY_TIME_OUT		/* assumed as receiving JJY call sign. */
};

enum bit_state {
   BIN_0,		/* binary 0 */
   BIN_1,		/* binary 1 */
   M,			/* Marker */
   PM,			/* Position Marker */
   JJY_J,		/* JJY call 'J' */
   JJY_Y,		/* JJY call 'Y' */
   JJY__,	    /* JJY call '_' */
   UNKNOWN
};

enum tone_state {
   TONE_E,
   TONE_N,
   TONE_THROUGH_ON,
   TONE_THROUGH_OFF,
   TONE_IDLE
};

#define nBlock	6
#define nBit	10

/* BCD code table */
int BCD_table [nBlock][nBit] =
{
	{ 0, 40, 20, 10,  0, 8, 4, 2, 1, 0 },		// minute
	{ 0,  0, 20, 10,  0, 8, 4, 2, 1, 0 },		// hour
	{ 0,  0, 200, 100, 0, 80, 40, 20, 10, 0 },	// upper day
	{ 8,  4,  2,  1,  0, 0, 0, 0, 0, 0 },		// lower day
	{ 0, 80, 40, 20, 10, 8, 4, 2, 1, 0 },		// lower year (+2000)
	{ 4,  2,  1,  0,  0, 0, 0, 0, 0, 0 }		// days of the week
};

const char week[7][4] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
const signed int monthDays[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

struct JJY_data
{
	int	nMinute;
	int	nHour;
	int	nDay;
	int	nYear;
	int	nDay_of_week;
	int	month;
	int	day;
	char	day_of_week[3];
};

// Pulse Width (usec)
#define PW_M	200000
#define PW_1	500000
#define PW_0	800000
#define PVAL	100000		// pulse width should be (PW_x +/- PVAL)


/***************************************************************************
*	Function Prototypes
****************************************************************************/

void prvHardwareSetup(void);

void BCD_decode_data(uint8);
uint32 BCD2time(uint8);
void display_rx_data(enum bit_state);
void clear_time_data(void);
void display_time(void);
void nDay_to_calendar(void);

/***************************************************************************
*	main()
****************************************************************************/

int main()
{
    prvHardwareSetup();
    CyGlobalIntEnable; /* Enable global interrupts. */

    /* Initializes the I2C CLCD. */
    I2C_1_Start();
    I2C_CLCD_Start();
    
    /* Create Tasks */
    xMutex_CLCD = xSemaphoreCreateMutex();

    CyDelay(100u);
    
    I2C_CLCD_Position(0u,0u);
    I2C_CLCD_PrintString("JJY Receiver");
    I2C_CLCD_Position(1u,0u);
    I2C_CLCD_PrintString("getting started");

    CyDelay(1000u);
    
    xTaskCreate(Task_TONE, "TONE", TASK_STACK_TONE, NULL, TASK_PRIORITY_TONE, NULL);
    xTaskCreate(Task_JJY, "JJY", TASK_STACK_JJY, NULL, TASK_PRIORITY_JJY, NULL);
    xQueue_TONE    = xQueueCreate(1, 1);     /* 1 x 1byte */

    /* Start RTOS Kernel */
    vTaskStartScheduler();

    for(;;)
    {
        /* Place your application code here. */
    }
}

/*---------------------------------------------------------------------------*/

void prvHardwareSetup( void )
{
    /* Port layer functions that need to be copied into the vector table. */
    extern void xPortPendSVHandler( void );
    extern void xPortSysTickHandler( void );
    extern void vPortSVCHandler( void );
    extern cyisraddress CyRamVectors[];

	/* Install the OS Interrupt Handlers. */
	CyRamVectors[ 11 ] = ( cyisraddress ) vPortSVCHandler;
	CyRamVectors[ 14 ] = ( cyisraddress ) xPortPendSVHandler;
	CyRamVectors[ 15 ] = ( cyisraddress ) xPortSysTickHandler;
    
}
/*---------------------------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
	/* The stack space has been execeeded for a task, considering allocating more. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
}
/*---------------------------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
	/* The heap space has been execeeded. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
}
/*---------------------------------------------------------------------------*/

/***************************************************************************
*	Task_TONE
****************************************************************************/
void Task_TONE(void *pvParameters)
{
    const portTickType xDelay    = 1u   / portTICK_RATE_MS;
    const portTickType dotDelay  = 100u / portTICK_RATE_MS;
    const portTickType dashDelay = 400u / portTICK_RATE_MS;

    enum tone_state tone_flag;

    /* start the tone generator */
	TONE_Control_Reg_Write(0u);    /* Tone control OFF */
    WaveDAC8_1_Start();

    for(;;)
    {
        /* Get tone generate request from Task_JJT */
        if (uxQueueMessagesWaiting(xQueue_TONE) > 0)
        {
            xQueueReceive(xQueue_TONE, &tone_flag, 0);

            switch(tone_flag)
            {
                case TONE_E:     /* 100ms */
                	TONE_Control_Reg_Write(1u);
                    vTaskDelay(dotDelay);
                	TONE_Control_Reg_Write(0u);
                    break;
                case TONE_N:     /* 400ms + 100ms */
                	TONE_Control_Reg_Write(1u);
                    vTaskDelay(dashDelay);
                	TONE_Control_Reg_Write(0u);
                    vTaskDelay(dotDelay);
                	TONE_Control_Reg_Write(1u);
                    vTaskDelay(dotDelay);
                	TONE_Control_Reg_Write(0u);
                    break;
                case TONE_THROUGH_ON:
                    /* Control_Reg_1 bit1 = 1 */
                	TONE_Control_Reg_Write(2u);
                    break;
                case TONE_THROUGH_OFF:
                	TONE_Control_Reg_Write(0u);
                    break;
                default:
                    /* do nothing */
                    break;
            }
            tone_flag = TONE_IDLE;
        }       
        vTaskDelay(xDelay);
    }
}


/***************************************************************************
*	Task_JJY
****************************************************************************/

/*********************************
*	Private Variables
**********************************/
enum rec_state r_flag;
enum bit_state data[nBlock][nBit];	/* Received data */
enum bit_state JJY_data[nBit] = {JJY_J, JJY_J, JJY_Y, JJY__,
                                 JJY_J, JJY_J, JJY_Y, JJY__,
                                 JJY__, JJY__};
struct JJY_data	ct;                 /* current JJY decoded data */

uint8 frame_sync = FALSE;
uint8 valid_data = FALSE;
uint8 block_index = 0;		/* Data block number : 0~5 */
uint8 bit_index = 0;		/* BCD data bit number : 0-3 */
uint32 pulse_width;         /* pulse width (usec) */

uint8 CLCD_sync = FALSE; 
uint8 CLCD_block = 0;
uint8 CLCD_bit = 0;

/* JJY send its call sign at every 15min, 45min */
uint8 pre_JJY_call = FALSE;	/* the first block contains 15min or 45min */
uint8 JJY_TO_counter;       /* set after the JJY call and wait for next PM */

char buf[20];

/*********************************
*	Interrupt Handler
**********************************/
CY_ISR(counter_tc_ISR)
{
	if (JJY_Control_Reg_Read())   /* JJY Call */
		r_flag = JJY_TIME_OUT;
	else
		r_flag = IDLE;
    // Debug
    Pin_2_Write(~Pin_2_Read());
}

CY_ISR(tc_pulse_det_ISR)
{
    LED_Write(1u);
	if (JJY_Control_Reg_Read())   /* JJY Call */
		return;
    Counter_1_WriteCounter(0u);
}

CY_ISR(tc_pulse_end_ISR)
{
    LED_Write(0u);
	if (JJY_Control_Reg_Read())   /* JJY Call */
		return;
    r_flag = PULSE_WIDHT_DET;

    pulse_width = Counter_1_ReadCounter();
    /* Clear the Counter */
    Counter_1_WriteCounter(0u);
}



void Task_JJY(void *pvParameters)
{
  	enum bit_state last_bit = UNKNOWN;		/* Last received bit */
    enum tone_state tone_flag;

    const portTickType xDelay = 1u      / portTICK_RATE_MS;
    const portTickType jjyDelay = 600u  / portTICK_RATE_MS;
    
    Counter_1_Start();
    isr_COUNTER_TC_StartEx(counter_tc_ISR);
    isr_TC_PULSE_DET_StartEx(tc_pulse_det_ISR);
    isr_TC_PULSE_END_StartEx(tc_pulse_end_ISR);

    I2C_CLCD_WriteControl(I2C_CLCD_CLEAR_DISPLAY);

    r_flag = IDLE;
    Counter_1_WriteCounter(0u);     /* Clear the Counter */

    for(;;)
    {
    	/********************************************
    	*  The pulse is assumed as JJY call sign
    	*********************************************/
    	if (r_flag == JJY_TIME_OUT)
    	{
			data[block_index][bit_index] = JJY_data[bit_index];
    		last_bit = JJY_data[bit_index];
			bit_index++;

    		if (bit_index == nBit - 1)
			{
                //vTaskDelay(jjyDelay);           /* 600ms */
                JJY_Control_Reg_Write(FALSE);   /* JJY Call */
    		}
            Counter_1_WriteCounter(0u);     /* Clear the Counter */

    		/* print rx data on CLCD */
			display_rx_data(last_bit);
    	}

    	/********************************************
    	*  Falling edge of a pulse is detected
    	*********************************************/
    	if (r_flag == PULSE_WIDHT_DET)
    	{
            /* Marker or Position Marker */
    		if ((pulse_width > PW_M - PVAL) && (pulse_width < PW_M + PVAL))
			{
                /* Are there two continuous Markers?　*/
				if (last_bit == PM)
				{
					if (block_index != 0)
					{
						frame_sync = FALSE;
						valid_data = FALSE;
					}
					bit_index = 0;
					block_index = 0;
					data[block_index][bit_index] = M;	/* This bit is Marker */
					bit_index++;
					last_bit = M;
					pre_JJY_call = FALSE;

                   /* Turn second pulse ON */
    				if (BCD2time(0) == 59)      /* if the last time was 59 min, */
                        tone_flag = TONE_N;     /* this marker is for 0 min period. */
                    else
                        tone_flag = TONE_E;
                    xQueueSend(xQueue_TONE, &tone_flag, 0);
                }
				else
				{
					data[block_index][bit_index] = PM;	/* This bit is Position Marker */
                    /* Is this the 1st Block? */
					if(block_index == 0)
					{
						if ((data[0][0] == M) && (data[0][9] == PM))
							frame_sync = TRUE;
						else
						{
							frame_sync = FALSE;
							block_index = 0;
						}
					}

					/* decode BCD data and print data */
                    BCD_decode_data(block_index);

		    		if ((pre_JJY_call == TRUE) && (block_index == 3))
                        JJY_Control_Reg_Write(TRUE);      /* JJY Call */

                    block_index++;
					bit_index = 0;
					last_bit = PM;
				}
			}

    		else if ((pulse_width > PW_1 - PVAL) && (pulse_width < PW_1 + PVAL))
			{
				data[block_index][bit_index] = BIN_1;
				bit_index++;
				last_bit = BIN_1;
			}
    		else if ((pulse_width > PW_0 - PVAL) && (pulse_width < PW_0 + PVAL))
			{
				data[block_index][bit_index] = BIN_0;
				bit_index++;
				last_bit = BIN_0;
			}
			else
			{
				data[block_index][bit_index] = UNKNOWN;
				bit_index++;
				last_bit = UNKNOWN;
			}

			/* Is Data Index valid? */
			if (bit_index > (nBit - 1))
			{
				bit_index = 0;
				frame_sync = FALSE;
				valid_data = FALSE;
			}
            
			/* print rx data on CLCD */
			display_rx_data(last_bit);
		}

    	/********************************************
    	*  1s counter is expired, reset state
    	*********************************************/
    	if (r_flag == IDLE)
    	{
			// Reset state machine
    		frame_sync = FALSE;
			valid_data = FALSE;
			bit_index = 0;
			block_index = 0;

			// Reset JJY flags
			pre_JJY_call = FALSE;
            JJY_Control_Reg_Write(FALSE);
    	}

    	/* Set flag */
    	r_flag = PULSE_WAIT;

        vTaskDelay(xDelay);
    }
}


/***************************************************
*  Decode the time data
****************************************************/
void BCD_decode_data(uint8 index)
{
	if (frame_sync)
	{
		switch(index)
		{
			case 0:
				ct.nMinute = BCD2time(index);
				/* JJY call sign ? */
				if ((ct.nMinute == 15) || (ct.nMinute == 45))
					pre_JJY_call = TRUE;
				else
					pre_JJY_call = FALSE;
				break;
			case 1:
				ct.nHour = BCD2time(index);
				break;
			case 3:
				ct.nDay = BCD2time(index -1 ) + BCD2time(index);
				break;
			case 4:
				if (pre_JJY_call == FALSE)
					ct.nYear = BCD2time(index);
				break;
			case 5:
				ct.nDay_of_week = BCD2time(index);
				break;
		}
	}
}

/***************************************************
*  BCD code to Time data
****************************************************/
uint32 BCD2time (uint8 block)
{
	int time_code = 0;
	int bit;

	for (bit = 0; bit < nBit; bit++)
	{
		if (data[block][bit] == BIN_1)
			time_code += BCD_table[block][bit];
	}
	return time_code;
}

/***************************************************
*  Display the JJY received data on CLCD
****************************************************/
void display_rx_data(enum bit_state last_bit)
{
	char buf[32];	/* buffer */

	if (last_bit == M)
	{
		CLCD_sync = TRUE;
		CLCD_block = 0;
		CLCD_bit = 0;
	}
	/* character position */
	if (CLCD_bit == 0)
	{
		I2C_CLCD_Position(0, 0);
		if (CLCD_sync)
		{
			sprintf(buf, "(%d)             ", CLCD_block);
			I2C_CLCD_PrintString(buf);
		}
		else
			I2C_CLCD_PrintString("(x)             ");
	}

	/* print received data */
	I2C_CLCD_Position(0, CLCD_bit + 4);
	if (last_bit == M)
		I2C_CLCD_PutChar('M');
	else if (last_bit == PM)
		I2C_CLCD_PutChar('P');
	else if (last_bit == BIN_0)
		I2C_CLCD_PutChar('0');
	else if (last_bit == BIN_1)
		I2C_CLCD_PutChar('1');
	else if (last_bit == JJY_J)
		I2C_CLCD_PutChar('J');
	else if (last_bit == JJY_Y)
		I2C_CLCD_PutChar('Y');
	else if (last_bit == JJY__)
		I2C_CLCD_PutChar(' ');
	else
	{
		I2C_CLCD_PutChar('?');
		CLCD_sync = FALSE;
	}

	CLCD_bit++;
	if (last_bit == PM)
	{
		/* Display current time on the 2nd line of CLCD */
		display_time();
		CLCD_block++;
		CLCD_bit = 0;
	}
}

void clear_time_data (void)
{
	ct.nMinute = 0;
	ct.nHour = 0;
	ct.nDay = 0;
	ct.nYear = 0;
	ct.nDay_of_week = 0;
	ct.month = 0;
	ct.day = 0;
	sprintf(ct.day_of_week, "000");
}

/***************************************************
*  Display the time on CLCD
****************************************************/
/*
* display format is "20YY/MM/DD HH:MM"
*                    0000000000111111
*                    0123456789012345  
*/
void display_time (void)
{
	char buf[32];	/* buffer */

	switch (CLCD_block)
	{
		case 0:	/* minute */
			I2C_CLCD_Position(1, 14);
			sprintf(buf, "%02d", ct.nMinute);
			I2C_CLCD_PrintString(buf);
			break;
		case 1: /* hour */
			I2C_CLCD_Position(1, 11);
			sprintf(buf, "%02d:", ct.nHour);
			I2C_CLCD_PrintString(buf);
			break;
		case 3: /* calendar */
			nDay_to_calendar();
			I2C_CLCD_Position(1, 5);
			sprintf(buf, "%02d/%02d ", ct.month, ct.day);
			I2C_CLCD_PrintString(buf);
			break;
		case 4: /* year */
			I2C_CLCD_Position(1, 0);
			sprintf(buf, "20%02d/", ct.nYear);
			I2C_CLCD_PrintString(buf);
			break;
		case 5: /* day of the week */
			/* there is no space to use */
			break;
	}
}

/***************************************************
*  The day number in the year to calendar
****************************************************/
void nDay_to_calendar (void)
{
	int i;
	int sum_of_month_days = 0;
	int leap_year = FALSE;

	if ((ct.nYear % 4) == 0)
		leap_year = TRUE;

	for(i = 1; i < 13; i++)
	{
		if (i == 2 && leap_year)
			sum_of_month_days++;
		sum_of_month_days += monthDays[i];

		if( ct.nDay <= sum_of_month_days )
		{
			ct.month = i;
			ct.day = ct.nDay - (sum_of_month_days - monthDays[i]);
			break;
		}
	}
}


/* [] END OF FILE */
